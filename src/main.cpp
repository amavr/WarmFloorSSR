#include <WiFi.h>
#include <PubSubClient.h>
#include <DallasTemperature.h>
#include <OneWire.h>
#include <PID_v1.h>
#include <SPIFFS.h>
#include <driver/ledc.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/queue.h>
#include <freertos/semphr.h>
#include <esp_task_wdt.h>
#include <ArduinoJson.h>
#include <ArduinoOTA.h>
#include <esp_system.h>
#include <esp_pm.h>
#include <esp32/pm.h>
#include <ESPmDNS.h>

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø WEMOS S2 MINI ===
#define WIFI_SSID "Your_WiFi_SSID"
#define WIFI_PASS "Your_WiFi_Password"
#define MQTT_SERVER "192.168.1.10"
#define MQTT_PORT 1883
#define MQTT_CLIENT_ID "wemos_s2_heating_01"

// GPIO –¥–ª—è Wemos S2 Mini:
#define SSR_PIN_A 20    // –ö–æ–Ω—Ç—É—Ä A (–Ω–µ –∑–∞–Ω—è—Ç SPI, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è PWM)
#define SSR_PIN_B 21    // –ö–æ–Ω—Ç—É—Ä B (–Ω–µ –∑–∞–Ω—è—Ç SPI, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è PWM)
#define ONE_WIRE_BUS 19 // DS18B20 (GPIO19 —Å–≤–æ–±–æ–¥–µ–Ω)
#define LED_PIN 15      // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–∞—è –ª–∞–º–ø–∞ (GPIO15)

// –ü–ò–î-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
volatile double Kp = 15.0;
volatile double Ki = 0.05;
volatile double Kd = 2.0;

// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ª–∏–º–∏—Ç—ã
#define MAX_SAFE_TEMP 35.0
#define MIN_SETPOINT 15.0
#define MAX_SETPOINT 30.0
#define TEMP_HYSTERESIS 0.2

// PWM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
#define PWM_CHANNEL_A 0
#define PWM_CHANNEL_B 1
#define PWM_FREQ 0.5f        // 0.5 –ì—Ü = 2 —Å–µ–∫ —Ü–∏–∫–ª
#define PWM_BITS 8           // 0‚Äì255
#define PWM_SMOOTHING_STEP 5 // –®–∞–≥ –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

// –¢–∞–π–º–∏–Ω–≥–∏
#define WATCHDOG_TIMEOUT 30
#define TEMP_READ_RETRIES 3
#define WIFI_RECONNECT_INTERVAL 30000
#define DIAGNOSTICS_INTERVAL 60000

// –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const TickType_t UPDATE_INTERVAL = pdMS_TO_TICKS(5000);
const TickType_t PWM_UPDATE_INTERVAL = pdMS_TO_TICKS(100);
float lastOutputA = 0.0;
float lastOutputB = 0.0;
float maxChangePerCycle = 2.0f;

// === –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ===
struct SystemState
{
    double currentTemp;
    double SetpointA;
    double SetpointB;
    double OutputA;
    double OutputB;
    bool systemEnabled;
    bool emergencyStop;
    String status;
    uint32_t lastSuccessfulTempRead;
    bool temperatureSensorFault;
    bool pidAActive;
    bool pidBActive;
};

struct SystemDiagnostics
{
    uint32_t systemUptime;
    uint32_t wifiDisconnects;
    uint32_t mqttDisconnects;
    uint32_t tempReadErrors;
    uint32_t pidCalculations;
    uint32_t pidCalculationFailures;
    String lastResetReason;
    String lastError;
    uint32_t freeHeap;
};

SystemState state = {0.0, 22.0, 22.0, 0.0, 0.0, true, false, "INIT", 0, false};
SystemDiagnostics diagnostics = {0, 0, 0, 0, 0, 0, "", "", 0};

// === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===
SemaphoreHandle_t xMutexState;
QueueHandle_t xQueueTemp;
portMUX_TYPE pidMux = portMUX_INITIALIZER_UNLOCKED;

// === MQTT ===
WiFiClient espClient;
PubSubClient mqttClient(espClient);
uint32_t wifiLastReconnectAttempt = 0;

const char *TOPIC_SETPOINT_A = "homeassistant/climate/heating_zone_a/setpoint";
const char *TOPIC_ENABLED_A = "homeassistant/climate/heating_zone_a/enabled";
const char *TOPIC_SETPOINT_B = "homeassistant/climate/heating_zone_b/setpoint";
const char *TOPIC_ENABLED_B = "homeassistant/climate/heating_zone_b/enabled";
const char *TOPIC_CURRENT_TEMP = "homeassistant/sensor/heating_temp/state";
const char *TOPIC_TARGET_TEMP_A = "homeassistant/sensor/heating_target_a/state";
const char *TOPIC_TARGET_TEMP_B = "homeassistant/sensor/heating_target_b/state";
const char *TOPIC_POWER_A = "homeassistant/sensor/power_zone_a/state";
const char *TOPIC_POWER_B = "homeassistant/sensor/power_zone_b/state";
const char *TOPIC_STATUS = "homeassistant/sensor/heating_status/state";
const char *TOPIC_PID_KP = "homeassistant/climate/heating_zone_a/pid_kp";
const char *TOPIC_PID_KI = "homeassistant/climate/heating_zone_a/pid_ki";
const char *TOPIC_PID_KD = "homeassistant/climate/heating_zone_a/pid_kd";
const char *TOPIC_DIAGNOSTICS = "homeassistant/sensor/heating_diagnostics/state";
const char *TOPIC_EMERGENCY = "homeassistant/climate/heating_control/emergency";

// === –û–ë–™–ï–ö–¢–´ ===
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
PID myPID_A(&state.currentTemp, &state.OutputA, &state.SetpointA, Kp, Ki, Kd, DIRECT);
PID myPID_B(&state.currentTemp, &state.OutputB, &state.SetpointB, Kp, Ki, Kd, DIRECT);

// === OTA ===
const char *OTA_PASSWORD = "your_ota_password_123";
String otaHostname = "wemos-s2-heating";

// === –§–£–ù–ö–¶–ò–ò ===
void setupPWM();
void loadPIDParams();
void savePIDParams();
float readTemperature();
void connectToWiFi();
void publishStatus();
void publishDiagnostics();
void emergencyShutdown(String reason);
void resetEmergency();
void setCpuFrequencyCustom(uint8_t freq);
void setupOTA();
const char *resetReasonToString(esp_reset_reason_t reason);

TaskHandle_t hReadTemp, hCalcPID, hControlPWM, hMQTT, hOTA;

void setupPWM()
{
    ledcSetup(PWM_CHANNEL_A, PWM_FREQ, PWM_BITS);
    ledcSetup(PWM_CHANNEL_B, PWM_FREQ, PWM_BITS);

    ledcAttachPin(SSR_PIN_A, PWM_CHANNEL_A);
    ledcAttachPin(SSR_PIN_B, PWM_CHANNEL_B);

    ledcWrite(PWM_CHANNEL_A, 0);
    ledcWrite(PWM_CHANNEL_B, 0);

    Serial.println("‚úÖ –î–≤–∞ –∫–∞–Ω–∞–ª–∞ PWM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Wemos S2 Mini");
}

void loadPIDParams()
{
    if (!SPIFFS.begin(true))
    {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å SPIFFS");
        return;
    }

    if (!SPIFFS.exists("/pid_params.txt"))
    {
        Serial.println("‚ö†Ô∏è –§–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        return;
    }

    File file = SPIFFS.open("/pid_params.txt", "r");
    if (!file)
    {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        return;
    }

    String line = file.readStringUntil('\n');
    file.close();

    int comma1 = line.indexOf(',');
    int comma2 = line.lastIndexOf(',');

    if (comma1 == -1 || comma2 == -1)
    {
        Serial.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        return;
    }

    portENTER_CRITICAL(&pidMux);
    Kp = line.substring(0, comma1).toFloat();
    Ki = line.substring(comma1 + 1, comma2).toFloat();
    Kd = line.substring(comma2 + 1).toFloat();
    myPID_A.SetTunings(Kp, Ki, Kd);
    myPID_B.SetTunings(Kp, Ki, Kd);
    portEXIT_CRITICAL(&pidMux);

    Serial.printf("üìÇ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–ò–î –∑–∞–≥—Ä—É–∂–µ–Ω—ã: Kp=%.1f Ki=%.2f Kd=%.1f\n", Kp, Ki, Kd);
}

void savePIDParams()
{
    File file = SPIFFS.open("/pid_params.txt", "w");
    if (!file)
    {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ SPIFFS");
        return;
    }

    portENTER_CRITICAL(&pidMux);
    file.printf("%.1f,%.2f,%.1f\n", Kp, Ki, Kd);
    portEXIT_CRITICAL(&pidMux);

    file.close();
    Serial.println("üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–ò–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SPIFFS");
}

float readTemperature()
{
    for (int attempt = 0; attempt < TEMP_READ_RETRIES; attempt++)
    {
        sensors.requestTemperatures();
        float temp = sensors.getTempCByIndex(0);

        if (temp != DEVICE_DISCONNECTED_C && temp >= -20 && temp <= 60)
        {
            xSemaphoreTake(xMutexState, portMAX_DELAY);
            state.temperatureSensorFault = false;
            state.lastSuccessfulTempRead = millis();
            xSemaphoreGive(xMutexState);
            return temp;
        }
        vTaskDelay(pdMS_TO_TICKS(100));
    }

    xSemaphoreTake(xMutexState, portMAX_DELAY);
    state.temperatureSensorFault = true;
    diagnostics.tempReadErrors++;
    xSemaphoreGive(xMutexState);

    Serial.println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã!");
    return state.currentTemp;
}

void connectToWiFi()
{
    if (WiFi.status() == WL_CONNECTED)
        return;

    Serial.printf("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi %s", WIFI_SSID);

    WiFi.disconnect();
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    WiFi.setSleep(true);

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 15)
    {
        delay(1000);
        Serial.print(".");
        attempts++;
    }

    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.println("\n‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω");
        Serial.printf("IP –∞–¥—Ä–µ—Å: %s\n", WiFi.localIP().toString().c_str());
    }
    else
    {
        Serial.println("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WiFi");
        diagnostics.wifiDisconnects++;
    }
}

void setCpuFrequencyCustom(uint8_t freq)
{
    static uint8_t currentFreq = 0;

    if (freq != currentFreq)
    {
        esp_pm_config_esp32_t config = {
            .max_freq_mhz = freq,
            .min_freq_mhz = freq,
            .light_sleep_enable = false};
        esp_pm_configure(&config);

        currentFreq = freq;
        Serial.printf("‚ö° CPU frequency changed to %d MHz\n", freq);
    }
}

void emergencyShutdown(String reason)
{
    xSemaphoreTake(xMutexState, portMAX_DELAY);
    state.systemEnabled = false;
    state.emergencyStop = true;
    state.OutputA = 0;
    state.OutputB = 0;
    state.temperatureSensorFault = true;
    state.status = "EMERGENCY: " + reason;

    if (reason.length() > 128)
    {
        diagnostics.lastError = reason.substring(0, 128) + "...";
    }
    else
    {
        diagnostics.lastError = reason;
    }

    xSemaphoreGive(xMutexState);

    ledcWrite(PWM_CHANNEL_A, 0);
    ledcWrite(PWM_CHANNEL_B, 0);
    digitalWrite(LED_PIN, HIGH); // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –∞–≤–∞—Ä–∏–∏

    Serial.println("üö® –ê–í–ê–†–ò–ô–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï: " + reason);
    mqttClient.publish(TOPIC_EMERGENCY, reason.c_str(), true);
}

void resetEmergency()
{
    xSemaphoreTake(xMutexState, portMAX_DELAY);
    state.emergencyStop = false;
    state.systemEnabled = true;
    state.status = "NORMAL";
    state.temperatureSensorFault = false;
    xSemaphoreGive(xMutexState);

    Serial.println("üîÑ –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ");
}

void publishStatus()
{
    xSemaphoreTake(xMutexState, portMAX_DELAY);

    if (mqttClient.connected())
    {
        mqttClient.publish(TOPIC_CURRENT_TEMP, String(state.currentTemp, 2).c_str(), true);
        mqttClient.publish(TOPIC_TARGET_TEMP_A, String(state.SetpointA, 1).c_str(), true);
        mqttClient.publish(TOPIC_TARGET_TEMP_B, String(state.SetpointB, 1).c_str(), true);
        mqttClient.publish(TOPIC_POWER_A, String(state.OutputA, 1).c_str(), true);
        mqttClient.publish(TOPIC_POWER_B, String(state.OutputB, 1).c_str(), true);
        mqttClient.publish(TOPIC_STATUS, state.status.c_str(), true);

        portENTER_CRITICAL(&pidMux);
        mqttClient.publish(TOPIC_PID_KP, String(Kp, 1).c_str(), true);
        mqttClient.publish(TOPIC_PID_KI, String(Ki, 2).c_str(), true);
        mqttClient.publish(TOPIC_PID_KD, String(Kd, 1).c_str(), true);
        portEXIT_CRITICAL(&pidMux);
    }

    xSemaphoreGive(xMutexState);
}

void publishDiagnostics()
{
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    StaticJsonDocument<1024> doc;
#pragma GCC diagnostic pop

    xSemaphoreTake(xMutexState, portMAX_DELAY);
    doc["uptime"] = millis() / 1000;
    doc["wifi_disconnects"] = diagnostics.wifiDisconnects;
    doc["mqtt_disconnects"] = diagnostics.mqttDisconnects;
    doc["temp_errors"] = diagnostics.tempReadErrors;
    doc["pid_calculations"] = diagnostics.pidCalculations;
    doc["pid_calculations_fails"] = diagnostics.pidCalculationFailures;
    doc["free_heap"] = ESP.getFreeHeap();
    doc["cpu_frequency"] = ESP.getCpuFreqMHz();
    doc["temperature_fault"] = state.temperatureSensorFault;
    doc["emergency_stop"] = state.emergencyStop;
    doc["last_error"] = diagnostics.lastError;
    doc["last_reset_reason"] = diagnostics.lastResetReason.c_str();
    xSemaphoreGive(xMutexState);

    char buffer[1024];
    serializeJson(doc, buffer);

    if (mqttClient.connected())
    {
        mqttClient.publish(TOPIC_DIAGNOSTICS, buffer, true);
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
    String message;
    for (int i = 0; i < length; i++)
    {
        message += (char)payload[i];
    }

    Serial.printf("üì• –ü–æ–ª—É—á–µ–Ω–æ: %s -> %s\n", topic, message.c_str());

    if (strcmp(topic, TOPIC_SETPOINT_A) == 0)
    {
        float newTemp = message.toFloat();
        if (newTemp >= MIN_SETPOINT && newTemp <= MAX_SETPOINT)
        {
            xSemaphoreTake(xMutexState, portMAX_DELAY);
            state.SetpointA = newTemp;
            xSemaphoreGive(xMutexState);
            Serial.printf("üéØ –ó–æ–Ω–∞ A: –Ω–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ %.1f¬∞C\n", state.SetpointA);
        }
    }
    else if (strcmp(topic, TOPIC_ENABLED_A) == 0)
    {
        if (message == "RESET")
        {
            resetEmergency();
        }
        else
        {
            xSemaphoreTake(xMutexState, portMAX_DELAY);
            state.systemEnabled = (message == "ON" || message == "true");
            xSemaphoreGive(xMutexState);
            Serial.printf("üîÑ –ó–æ–Ω–∞ A: %s\n", state.systemEnabled ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–û–¢–ö–õ–Æ–ß–ï–ù–ê");
        }
    }
    else if (strcmp(topic, TOPIC_SETPOINT_B) == 0)
    {
        float newTemp = message.toFloat();
        if (newTemp >= MIN_SETPOINT && newTemp <= MAX_SETPOINT)
        {
            xSemaphoreTake(xMutexState, portMAX_DELAY);
            state.SetpointB = newTemp;
            xSemaphoreGive(xMutexState);
            Serial.printf("üéØ –ó–æ–Ω–∞ B: –Ω–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ %.1f¬∞C\n", state.SetpointB);
        }
    }
    else if (strcmp(topic, TOPIC_ENABLED_B) == 0)
    {
        if (message == "RESET")
        {
            resetEmergency();
        }
        else
        {
            xSemaphoreTake(xMutexState, portMAX_DELAY);
            state.systemEnabled = (message == "ON" || message == "true");
            xSemaphoreGive(xMutexState);
            Serial.printf("üîÑ –ó–æ–Ω–∞ B: %s\n", state.systemEnabled ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–û–¢–ö–õ–Æ–ß–ï–ù–ê");
        }
    }
    else if (strcmp(topic, TOPIC_PID_KP) == 0)
    {
        double newKp = message.toFloat();
        if (newKp > 0 && newKp <= 50)
        {
            portENTER_CRITICAL(&pidMux);
            Kp = newKp;
            myPID_A.SetTunings(Kp, Ki, Kd);
            myPID_B.SetTunings(Kp, Ki, Kd);
            portEXIT_CRITICAL(&pidMux);
            savePIDParams();
            Serial.printf("üîß Kp –æ–±–Ω–æ–≤–ª–µ–Ω: %.1f\n", Kp);
        }
    }
    else if (strcmp(topic, TOPIC_PID_KI) == 0)
    {
        double newKi = message.toFloat();
        if (newKi >= 0 && newKi <= 5)
        {
            portENTER_CRITICAL(&pidMux);
            Ki = newKi;
            myPID_A.SetTunings(Kp, Ki, Kd);
            myPID_B.SetTunings(Kp, Ki, Kd);
            portEXIT_CRITICAL(&pidMux);
            savePIDParams();
            Serial.printf("üîß Ki –æ–±–Ω–æ–≤–ª–µ–Ω: %.3f\n", Ki);
        }
    }
    else if (strcmp(topic, TOPIC_PID_KD) == 0)
    {
        double newKd = message.toFloat();
        if (newKd >= 0 && newKd <= 20)
        {
            portENTER_CRITICAL(&pidMux);
            Kd = newKd;
            myPID_A.SetTunings(Kp, Ki, Kd);
            myPID_B.SetTunings(Kp, Ki, Kd);
            portEXIT_CRITICAL(&pidMux);
            savePIDParams();
            Serial.printf("üîß Kd –æ–±–Ω–æ–≤–ª–µ–Ω: %.1f\n", Kd);
        }
    }
}

// === –ó–ê–î–ê–ß–ò FreeRTOS ===
void vTaskReadTemp(void *pvParameters)
{
    while (1)
    {
        esp_task_wdt_reset();

        float temp = readTemperature();

        xSemaphoreTake(xMutexState, portMAX_DELAY);
        state.currentTemp = temp;

        if (state.currentTemp > MAX_SAFE_TEMP && !state.emergencyStop)
        {
            xSemaphoreGive(xMutexState);
            emergencyShutdown("–ü–µ—Ä–µ–≥—Ä–µ–≤: " + String(state.currentTemp, 1) + "¬∞C");
            xSemaphoreTake(xMutexState, portMAX_DELAY);
        }

        if (state.temperatureSensorFault && millis() - state.lastSuccessfulTempRead > 300000)
        {
            xSemaphoreGive(xMutexState);
            emergencyShutdown("–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
            xSemaphoreTake(xMutexState, portMAX_DELAY);
        }

        xSemaphoreGive(xMutexState);

        vTaskDelay(UPDATE_INTERVAL);
    }
}

void vTaskCalculatePID(void *pvParameters)
{
    myPID_A.SetMode(AUTOMATIC);
    myPID_A.SetOutputLimits(0, 100);
    myPID_A.SetSampleTime(5000);
    myPID_B.SetMode(AUTOMATIC);
    myPID_B.SetOutputLimits(0, 100);
    myPID_B.SetSampleTime(5000);

    while (1)
    {
        esp_task_wdt_reset();

        xSemaphoreTake(xMutexState, portMAX_DELAY);

        if (state.systemEnabled && !state.emergencyStop && !state.temperatureSensorFault)
        {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
            bool computedA, computedB;

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞—â–∏—â–∞–µ–º –≤—ã–∑–æ–≤ Compute() —Ç–æ–π –∂–µ —Å–µ–∫—Ü–∏–µ–π, —á—Ç–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            portENTER_CRITICAL(&pidMux);
            computedA = myPID_A.Compute();
            computedB = myPID_B.Compute();
            portEXIT_CRITICAL(&pidMux);

            if (!computedA && !computedB)
            {
                // –ù–µ –±—ã–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–±–æ–π
                diagnostics.pidCalculationFailures++;

                // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                portENTER_CRITICAL(&pidMux);
                myPID_A.SetMode(AUTOMATIC);
                myPID_B.SetMode(AUTOMATIC);
                portEXIT_CRITICAL(&pidMux);
            }

            if (computedA || computedB)
            {
                diagnostics.pidCalculations++;

                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 100%)
                if (state.OutputA + state.OutputB > 100.0)
                {
                    float total = state.OutputA + state.OutputB;
                    state.OutputA = state.OutputA * 100.0 / total;
                    state.OutputB = state.OutputB * 100.0 / total;
                }

                // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
                float deltaA = state.OutputA - lastOutputA;
                float deltaB = state.OutputB - lastOutputB;

                if (deltaA > maxChangePerCycle)
                {
                    state.OutputA = lastOutputA + maxChangePerCycle;
                }
                else if (deltaA < -maxChangePerCycle)
                {
                    state.OutputA = lastOutputA - maxChangePerCycle;
                }

                if (deltaB > maxChangePerCycle)
                {
                    state.OutputB = lastOutputB + maxChangePerCycle;
                }
                else if (deltaB < -maxChangePerCycle)
                {
                    state.OutputB = lastOutputB - maxChangePerCycle;
                }

                lastOutputA = state.OutputA;
                lastOutputB = state.OutputB;

                state.status = "REGULATING";
            }
        }
        else
        {
            state.OutputA = 0;
            state.OutputB = 0;
            state.status = state.emergencyStop ? "EMERGENCY" : (state.systemEnabled ? "STANDBY" : "OFF");
        }

        xSemaphoreGive(xMutexState);
        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

void vTaskControlPWM(void *pvParameters)
{
    uint8_t currentPWM_A = 0;
    uint8_t currentPWM_B = 0;
    uint32_t lastCycleStart = millis();

    while (1)
    {
        esp_task_wdt_reset();

        xSemaphoreTake(xMutexState, portMAX_DELAY);

        // –ò–Ω—Ç–µ—Ä–ª–µ–π–≤–∏–Ω–≥ PWM: 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç—É—Ä–∞–º–∏
        const uint32_t CYCLE_PERIOD_MS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        uint32_t timeInCycle = (millis() - lastCycleStart) % CYCLE_PERIOD_MS;

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏
        uint8_t targetPWM_A = (uint8_t)(state.OutputA * 2.55f); // 0‚Äì100% ‚Üí 0‚Äì255
        uint8_t targetPWM_B = (uint8_t)(state.OutputB * 2.55f);

        // –ö–æ–Ω—Ç—É—Ä A —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —Ü–∏–∫–ª–∞
        if (timeInCycle < CYCLE_PERIOD_MS / 2)
        {
            // –ö–æ–Ω—Ç—É—Ä A –∞–∫—Ç–∏–≤–µ–Ω
            if (targetPWM_A > currentPWM_A)
            {
                currentPWM_A = min(static_cast<uint8_t>(currentPWM_A + PWM_SMOOTHING_STEP), targetPWM_A);
            }
            else if (targetPWM_A < currentPWM_A)
            {
                currentPWM_A = max(static_cast<uint8_t>(currentPWM_A - PWM_SMOOTHING_STEP), targetPWM_A);
            }

            // –§–∏–∑–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—É—Ä B, –Ω–æ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ledcWrite(PWM_CHANNEL_A, currentPWM_A);
            ledcWrite(PWM_CHANNEL_B, 0);
        }
        else
        {
            // –ö–æ–Ω—Ç—É—Ä B –∞–∫—Ç–∏–≤–µ–Ω
            if (targetPWM_B > currentPWM_B)
            {
                currentPWM_B = min(static_cast<uint8_t>(currentPWM_B + PWM_SMOOTHING_STEP), targetPWM_B);
            }
            else if (targetPWM_B < currentPWM_B)
            {
                currentPWM_B = max(static_cast<uint8_t>(currentPWM_B - PWM_SMOOTHING_STEP), targetPWM_B);
            }

            // –§–∏–∑–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—É—Ä A, –Ω–æ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ledcWrite(PWM_CHANNEL_B, currentPWM_B);
            ledcWrite(PWM_CHANNEL_A, 0);
        }

        xSemaphoreGive(xMutexState);

        vTaskDelay(PWM_UPDATE_INTERVAL);
    }
}

void vTaskMQTTClient(void *pvParameters)
{
    while (1)
    {
        esp_task_wdt_reset();

        if (mqttClient.connected())
        {
            setCpuFrequencyCustom(240);
        }
        else
        {
            setCpuFrequencyCustom(80);
        }

        if (WiFi.status() != WL_CONNECTED)
        {
            if (millis() - wifiLastReconnectAttempt > WIFI_RECONNECT_INTERVAL)
            {
                connectToWiFi();
                wifiLastReconnectAttempt = millis();
            }
            vTaskDelay(pdMS_TO_TICKS(1000));
            continue;
        }

        if (!mqttClient.connected())
        {
            Serial.print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT...");
            if (mqttClient.connect(MQTT_CLIENT_ID))
            {
                Serial.println(" ‚úÖ –£—Å–ø–µ—à–Ω–æ!");
                mqttClient.subscribe(TOPIC_SETPOINT_A);
                mqttClient.subscribe(TOPIC_ENABLED_A);
                mqttClient.subscribe(TOPIC_SETPOINT_B);
                mqttClient.subscribe(TOPIC_ENABLED_B);
                mqttClient.subscribe(TOPIC_PID_KP);
                mqttClient.subscribe(TOPIC_PID_KI);
                mqttClient.subscribe(TOPIC_PID_KD);
                publishStatus();
            }
            else
            {
                Serial.printf("‚ùå –æ—à–∏–±–∫–∞, –∫–æ–¥=%d\n", mqttClient.state());
                diagnostics.mqttDisconnects++;
                vTaskDelay(pdMS_TO_TICKS(5000));
            }
        }
        else
        {
            bool wasConnected = mqttClient.connected();
            mqttClient.loop();

            if (!wasConnected && mqttClient.connected())
            {
                Serial.println("‚úÖ MQTT –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω!");
                publishStatus();
            }

            static uint32_t lastPublish = 0;
            static uint32_t lastDiagnostics = 0;

            if (millis() - lastPublish > 10000)
            {
                publishStatus();
                lastPublish = millis();
            }

            if (millis() - lastDiagnostics > DIAGNOSTICS_INTERVAL)
            {
                publishDiagnostics();
                lastDiagnostics = millis();
            }
        }

        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

void vTaskOTA(void *pvParameters)
{
    ArduinoOTA.setHostname(otaHostname.c_str());
    ArduinoOTA.setPassword(OTA_PASSWORD);
    ArduinoOTA.onStart([]()
                       {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH)
      type = "sketch";
    else
      type = "filesystem";

    Serial.printf("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n", type.c_str()); });

    ArduinoOTA.onEnd([]()
                     { Serial.println("\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"); });

    ArduinoOTA.onProgress([](unsigned int progress, unsigned int total)
                          { Serial.printf("–ü—Ä–æ–≥—Ä–µ—Å—Å: %u%%\n", (progress / (total / 100))); });

    ArduinoOTA.onError([](ota_error_t error)
                       {
    Serial.printf("–û—à–∏–±–∫–∞ OTA: %d\n", error);
    if (error == OTA_AUTH_ERROR) Serial.println("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
    else if (error == OTA_BEGIN_ERROR) Serial.println("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    else if (error == OTA_CONNECT_ERROR) Serial.println("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("–û—à–∏–±–∫–∞ –ø—Ä–∏—ë–º–∞");
    else if (error == OTA_END_ERROR) Serial.println("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"); });

    ArduinoOTA.begin();

    while (1)
    {
        esp_task_wdt_reset();
        ArduinoOTA.handle();
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
void setup()
{
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n\n=== üöÄ Wemos S2 Mini –¢–µ—Ä–º–æ—Å—Ç–∞—Ç —Å –¥–≤—É–º—è –∫–æ–Ω—Ç—É—Ä–∞–º–∏ ===");
    Serial.println("–í–µ—Ä—Å–∏—è: 9.0 (–ò–Ω—Ç–µ—Ä–ª–µ–π–≤–∏–Ω–≥ PWM, FreeRTOS, OTA)");

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    esp_reset_reason_t resetReason = esp_reset_reason();
    diagnostics.lastResetReason = resetReasonToString(resetReason);
    Serial.print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ");
    Serial.println(diagnostics.lastResetReason);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
    pinMode(SSR_PIN_A, OUTPUT);
    pinMode(SSR_PIN_B, OUTPUT);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(SSR_PIN_A, LOW);
    digitalWrite(SSR_PIN_B, LOW);
    digitalWrite(LED_PIN, LOW);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞
    sensors.begin();
    sensors.setResolution(12);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FreeRTOS –æ–±—ä–µ–∫—Ç–æ–≤
    xMutexState = xSemaphoreCreateMutex();
    xQueueTemp = xQueueCreate(10, sizeof(float));

    if (!xMutexState || !xQueueTemp)
    {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!");
        while (1)
            ;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    loadPIDParams();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PID
    myPID_A.SetMode(AUTOMATIC);
    myPID_A.SetOutputLimits(0, 100);
    myPID_A.SetSampleTime(5000);
    myPID_B.SetMode(AUTOMATIC);
    myPID_B.SetOutputLimits(0, 100);
    myPID_B.SetSampleTime(5000);
    myPID_A.SetTunings(Kp, Ki, Kd);
    myPID_B.SetTunings(Kp, Ki, Kd);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWM
    setupPWM();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Watchdog
    esp_task_wdt_init(WATCHDOG_TIMEOUT, true);
    esp_task_wdt_add(NULL);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
    connectToWiFi();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT
    mqttClient.setServer(MQTT_SERVER, MQTT_PORT);
    mqttClient.setCallback(callback);
    mqttClient.setBufferSize(1024);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OTA
    setupOTA();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    xTaskCreate(vTaskReadTemp, "ReadTemp", 4096, NULL, 2, &hReadTemp);
    xTaskCreate(vTaskCalculatePID, "CalcPID", 4096, NULL, 3, &hCalcPID);
    xTaskCreate(vTaskControlPWM, "ControlPWM", 4096, NULL, 3, &hControlPWM);
    xTaskCreate(vTaskMQTTClient, "MQTTClient", 8192, NULL, 2, &hMQTT);
    xTaskCreate(vTaskOTA, "OTA", 8192, NULL, 1, &hOTA);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ Watchdog
    esp_task_wdt_add(hReadTemp);
    esp_task_wdt_add(hCalcPID);
    esp_task_wdt_add(hControlPWM);
    esp_task_wdt_add(hMQTT);
    esp_task_wdt_add(hOTA);

    Serial.println("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞.");
    digitalWrite(LED_PIN, HIGH); // –°–≤–µ—Ç–æ–¥–∏–æ–¥ –≥–æ—Ä–∏—Ç –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
}

void setupOTA()
{
    MDNS.begin(otaHostname.c_str());
    Serial.printf("üåê OTA –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ http://%s.local/update\n", otaHostname.c_str());
}

const char *resetReasonToString(esp_reset_reason_t reason)
{
    switch (reason)
    {
    case ESP_RST_UNKNOWN:
        return "UNKNOWN";
    case ESP_RST_POWERON:
        return "POWERON_RESET";
    case ESP_RST_SW:
        return "SW_RESET";
    case ESP_RST_PANIC:
        return "PANIC";
    case ESP_RST_INT_WDT:
        return "INT_WDT_RESET";
    case ESP_RST_TASK_WDT:
        return "TASK_WDT_RESET";
    case ESP_RST_WDT:
        return "WDT_RESET";
    case ESP_RST_DEEPSLEEP:
        return "DEEPSLEEP_RESET";
    case ESP_RST_BROWNOUT:
        return "BROWNOUT_RESET";
    case ESP_RST_SDIO:
        return "SDIO_RESET";
    default:
        return "INVALID_REASON";
    }
}

void loop()
{
    esp_task_wdt_reset();

    // –ú–∏–≥–∞–Ω–∏–µ LED –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
    static uint32_t lastBlink = 0;
    if (millis() - lastBlink > 1000)
    {
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
        lastBlink = millis();
    }

    vTaskDelay(pdMS_TO_TICKS(1000));
}